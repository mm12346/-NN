<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ระบบโหวตออนไลน์</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Sarabun:wght@400;500;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <!-- Include D3.js library for charting -->
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        body { font-family: 'Sarabun', sans-serif; background-color: #f0f2f5; }
        @keyframes fadeInOut {
            0%, 100% { opacity: 0; transform: translateY(10px); }\
            10%, 90% { opacity: 1; transform: translateY(0); }
        }
        .status-message { animation: fadeInOut 4s ease-in-out forwards; }
        .btn-nav.active { background-color: #1d4ed8; color: white; border-bottom-color: transparent; }
        .candidate-card { transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out; }
        .candidate-card:hover { transform: translateY(-5px); box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1); }
        .skeleton-card { background-color: #e5e7eb; border-radius: 0.5rem; animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite; }
        @keyframes pulse { 50% { opacity: .5; } }
        .modal-backdrop { background-color: rgba(0, 0, 0, 0.5); }

        /* Styles for D3.js chart */
        .chart-bar {
            /* fill: #4299e1; Blue-500 - now handled by D3 color scale */
            transition: fill 0.2s ease-in-out;
        }
        .chart-bar:hover {
            opacity: 0.8;
        }
        .axis text {
            font-size: 0.875rem; /* text-sm */
            fill: #4a5568; /* gray-700 */
        }
        .axis line, .axis path {
            stroke: #cbd5e0; /* gray-300 */
        }
        .chart-label {
            font-size: 0.875rem; /* text-sm, slightly larger */
            fill: #ffffff; /* white */
            font-weight: bold;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.3); /* Add subtle shadow for readability */
        }
    </style>
</head>
<body class="bg-gray-100">

    <div class="container mx-auto max-w-4xl p-4 min-h-screen">
        <div class="bg-white rounded-2xl shadow-xl overflow-hidden">
            <div class="p-6 sm:p-8">
                <header class="text-center mb-8">
                    <h1 class="text-3xl sm:text-4xl font-bold text-gray-800">ระบบโหวตออนไลน์</h1>
                    <p class="text-gray-500 mt-2">ลงคะแนนและตรวจสอบผลได้แบบเรียลไทม์</p>
                </header>

                <nav class="flex justify-center border-b border-gray-200 mb-8">
                    <button id="nav-vote" class="btn-nav active flex-1 sm:flex-none text-base sm:text-lg font-medium py-3 px-4 text-gray-600 hover:bg-gray-100 transition text-center"><i class="fas fa-vote-yea mr-2"></i>หน้าลงคะแนน</button>
                    <button id="nav-admin" class="btn-nav flex-1 sm:flex-none text-base sm:text-lg font-medium py-3 px-4 text-gray-600 hover:bg-gray-100 transition text-center"><i class="fas fa-chart-bar mr-2"></i>หน้าดูผลคะแนน</button>
                </nav>

                <main>
                    <!-- Voting Section -->
                    <div id="vote-view">
                        <!-- Removed voter-id input field -->
                        <div id="candidate-cards" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6 mt-6"></div>
                        <div id="status-message-container" class="h-16 mt-6"></div>
                    </div>

                    <!-- Admin/Results Section -->
                    <div id="admin-view" class="hidden">
                        <!-- Login View -->
                        <div id="admin-login-view">
                            <h2 class="text-2xl font-bold text-gray-800 text-center mb-4">Admin Login</h2>
                            <p class="text-center text-gray-500 mb-6">กรุณาใส่รหัสผ่านเพื่อดูผลคะแนน</p>
                            <form id="login-form" class="max-w-sm mx-auto space-y-4">
                                <div>
                                    <label for="admin-password" class="sr-only">Password</label>
                                    <input type="password" id="admin-password" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 transition text-center" placeholder="Password" required>
                                </div>
                                <button type="submit" class="w-full bg-green-600 text-white font-bold py-3 px-4 rounded-lg hover:bg-green-700">เข้าสู่ระบบ</button>
                            </form>
                            <div id="login-error-message" class="text-red-500 text-center mt-4 font-medium"></div>
                        </div>

                        <!-- Results View -->
                        <div id="admin-results-view" class="hidden">
                            <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-4 gap-4">
                                <h2 class="text-2xl font-bold text-gray-800">ผลการโหวตล่าสุด</h2>
                                <div class="flex gap-2">
                                     <button id="refresh-btn" class="bg-gray-200 text-gray-700 py-2 px-4 rounded-lg hover:bg-gray-300 transition"><i class="fas fa-sync-alt"></i></button>
                                     <button id="settings-btn" class="bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 transition"><i class="fas fa-cog"></i></button>
                                </div>
                            </div>

                            <!-- Chart Summary -->
                            <div class="bg-gray-50 p-4 rounded-lg border mb-4">
                                <h3 class="text-xl font-bold text-gray-800 mb-4">สรุปผลโหวต</h3>
                                <div id="vote-summary-chart" class="w-full h-64 sm:h-80">
                                    <p class="text-center text-gray-500">กำลังโหลดกราฟ...</p>
                                </div>
                                <p class="text-lg font-bold text-gray-800 text-center mt-4">จำนวนผู้โหวตทั้งหมด: <span id="total-voters" class="text-blue-600">0</span></p>
                            </div>

                            <div class="overflow-x-auto bg-gray-50 p-2 rounded-lg border">
                                <table class="min-w-full text-left">
                                    <thead class="bg-gray-200">
                                        <tr>
                                            <th class="p-3 text-sm font-semibold text-gray-600 uppercase">Timestamp</th>
                                            <th class="p-3 text-sm font-semibold text-gray-600 uppercase">Browser ID</th> <!-- Changed from Voter ID -->
                                            <th class="p-3 text-sm font-semibold text-gray-600 uppercase">Choice</th>
                                        </tr>
                                    </thead>
                                    <tbody id="results-table-body"></tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </main>
            </div>
        </div>
        <footer class="text-center py-6 text-gray-500 text-sm">
            <p>Voting Application &copy; 2024</p>
        </footer>
    </div>

    <!-- Settings Modal -->
    <div id="settings-modal" class="hidden fixed inset-0 z-50 flex items-center justify-center p-4">
        <div class="modal-backdrop absolute inset-0"></div>
        <div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-md z-10">
            <h3 class="text-2xl font-bold mb-4">ตั้งค่า</h3>
            <div id="settings-status" class="mb-4"></div>
            <div class="space-y-4">
                <div>
                    <label for="sheet-id-input" class="block text-sm font-medium text-gray-700">Google Sheet ID</label>
                    <input type="text" id="sheet-id-input" class="w-full p-2 mt-1 border border-gray-300 rounded-lg" placeholder="ใส่ ID ของ Google Sheet ที่นี่">
                    <p class="text-xs text-gray-500 mt-1">ปล่อยว่างเพื่อใช้ Spreadsheet ที่ผูกกับสคริปต์โดยตรง</p>
                </div>
                <div class="flex justify-end gap-3">
                    <button id="cancel-settings-btn" class="bg-gray-200 text-gray-800 py-2 px-4 rounded-lg hover:bg-gray-300">ยกเลิก</button>
                    <button id="save-settings-btn" class="bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700">บันทึก</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        const APP_CONFIG = {
            APPS_SCRIPT_URL: 'https://script.google.com/macros/s/AKfycbwj2a_1R9ehhAVGikPFOo5ga1Rg0d2hViKPSB0whWtUG_ZD6d3Oanbnamoyr28yAt2H3g/exec',
            ADMIN_PASSWORD: '5867050201',
            sheetId: '1Rc3z2Gizy5CgUuihQmdhQ6IE-y0aUgDglDd_lryuHWo' // <<--- ใส่ Google Sheet ID ตรงนี้
        };
        let isAdminLoggedIn = false;
        const LOCAL_STORAGE_KEY_VOTED = 'hasVoted'; // Key to store voting status
        const LOCAL_STORAGE_KEY_BROWSER_ID = 'browserId'; // Key to store browser ID

        // DOM Elements
        const { voteView, adminView, adminLoginView, adminResultsView, navVote, navAdmin, loginForm, adminPasswordInput, loginErrorMessage, candidateCardsContainer, statusContainer, resultsTableBody, refreshBtn, settingsBtn, settingsModal, cancelSettingsBtn, saveSettingsBtn, sheetIdInput, settingsStatus, voteSummaryChart, totalVotersSpan } = (() => ({
            voteView: document.getElementById('vote-view'),
            adminView: document.getElementById('admin-view'),
            adminLoginView: document.getElementById('admin-login-view'),
            adminResultsView: document.getElementById('admin-results-view'),
            navVote: document.getElementById('nav-vote'),
            navAdmin: document.getElementById('nav-admin'),
            loginForm: document.getElementById('login-form'),
            adminPasswordInput: document.getElementById('admin-password'),
            loginErrorMessage: document.getElementById('login-error-message'),
            candidateCardsContainer: document.getElementById('candidate-cards'),
            statusContainer: document.getElementById('status-message-container'),
            resultsTableBody: document.getElementById('results-table-body'),
            refreshBtn: document.getElementById('refresh-btn'),
            settingsBtn: document.getElementById('settings-btn'),
            settingsModal: document.getElementById('settings-modal'),
            cancelSettingsBtn: document.getElementById('cancel-settings-btn'),
            saveSettingsBtn: document.getElementById('save-settings-btn'),
            sheetIdInput: document.getElementById('sheet-id-input'),
            settingsStatus: document.getElementById('settings-status'),
            voteSummaryChart: document.getElementById('vote-summary-chart'), // New element
            totalVotersSpan: document.getElementById('total-voters'),       // New element
        }))();

        // ปิดการแก้ไข Sheet ID จาก UI และ LocalStorage
        function loadConfig() {
            // ไม่โหลดจาก localStorage อีกต่อไป
        }
        function saveConfig() {
            // ไม่อนุญาตให้เปลี่ยน sheetId
            settingsStatus.innerHTML = `<div class="p-2 bg-red-100 text-red-700 rounded-lg text-sm">ไม่สามารถเปลี่ยน Sheet ID ได้</div>`;
            setTimeout(() => {
                settingsModal.classList.add('hidden');
                settingsStatus.innerHTML = '';
            }, 1500);
        }

        function buildUrl(action) {
            let url = `${APP_CONFIG.APPS_SCRIPT_URL}?action=${action}`;
            if (APP_CONFIG.sheetId) {
                url += `&sheetId=${APP_CONFIG.sheetId}`;
            }
            return url;
        }

        async function fetchCandidates() {
            showLoadingSkeletons();
            try {
                const response = await fetch(buildUrl('getCandidates'));
                if (!response.ok) throw new Error('Network response was not ok');
                let candidates = await response.json(); // Get the response

                // FIX: Add a check to ensure candidates is an array
                if (!Array.isArray(candidates)) {
                    console.error('Fetched data for candidates is not an array:', candidates);
                    // If it's not an array, treat it as empty to prevent the .map() error
                    // You might want to display a more specific error message to the user here.
                    candidates = []; 
                    throw new Error('Received invalid data format for candidates. Please check your Google Sheet "Candidates" and Apps Script.');
                }

                renderCandidateCards(candidates);
                checkIfAlreadyVoted(); // Check voting status after candidates are loaded
            } catch (error) {
                console.error('Failed to fetch candidates:', error);
                candidateCardsContainer.innerHTML = `<p class="text-center text-red-500 col-span-full">เกิดข้อผิดพลาดในการโหลดข้อมูลผู้สมัคร: ${error.message}</p>`;
            }
        }

        async function fetchResults() {
            if (!isAdminLoggedIn) return;
            // Display loading messages
            resultsTableBody.innerHTML = '<tr><td colspan="3" class="text-center p-8 text-gray-500"><i class="fas fa-spinner fa-spin mr-2"></i>กำลังโหลดข้อมูล...</td></tr>';
            voteSummaryChart.innerHTML = '<p class="text-center text-gray-500"><i class="fas fa-spinner fa-spin mr-2"></i>กำลังโหลดกราฟ...</p>';
            totalVotersSpan.textContent = '0'; // Reset total voters before loading
            try {
                const fetchUrl = buildUrl('getResults'); // Get the URL
                console.log('Fetching Results from URL:', fetchUrl); // Log the URL for debugging

                const response = await fetch(fetchUrl, {
                    method: 'GET', // Explicitly specify GET method
                    mode: 'cors' // Changed to 'cors' to allow reading response
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status} - ${response.statusText}`);
                }
                const results = await response.json();
                console.log('Fetched Results:', results); // Log the raw results
                renderResults(results); // Render the raw table results

                // Process data for chart and total voters
                const voteCounts = {};
                const voterIds = new Set();
                results.forEach(row => {
                    const choice = row.Choice;
                    const browserId = row.BrowserID; // This is the key
                    if (choice) {
                        voteCounts[choice] = (voteCounts[choice] || 0) + 1;
                    }
                    if (browserId) { // Check if browserId exists before adding
                        voterIds.add(browserId);
                    }
                });
                console.log('Processed Voter IDs:', voterIds); // Log the set of unique voter IDs

                const chartData = Object.keys(voteCounts).map(choice => ({
                    candidate: choice,
                    votes: voteCounts[choice]
                }));

                renderChart(chartData);
                totalVotersSpan.textContent = voterIds.size; // Update total voters
            } catch (error) {
                console.error('Error fetching results:', error);
                resultsTableBody.innerHTML = `<tr><td colspan="3" class="text-center p-8 text-red-500">เกิดข้อผิดพลาดในการดึงข้อมูล: ${error.message}</td></tr>`;
                voteSummaryChart.innerHTML = `<p class="text-center text-red-500">เกิดข้อผิดพลาดในการโหลดกราฟ: ${error.message}</p>`;
                totalVotersSpan.textContent = 'ข้อผิดพลาด';
            }
        }

        function getBrowserId() {
            let browserId = localStorage.getItem(LOCAL_STORAGE_KEY_BROWSER_ID);
            if (!browserId) {
                browserId = crypto.randomUUID(); // Generate a unique ID for the browser
                localStorage.setItem(LOCAL_STORAGE_KEY_BROWSER_ID, browserId);
            }
            return browserId;
        }

        function checkIfAlreadyVoted() {
            const hasVoted = localStorage.getItem(LOCAL_STORAGE_KEY_VOTED);
            if (hasVoted) {
                showStatusMessage('คุณได้ทำการโหวตไปแล้ว 1 ครั้ง และไม่สามารถโหวตซ้ำได้', true);
                disableAllVoteButtons();
            }
        }

        function disableAllVoteButtons() {
            document.querySelectorAll('.vote-btn').forEach(button => {
                button.disabled = true;
                button.classList.add('bg-gray-400', 'hover:bg-gray-400');
                button.classList.remove('bg-blue-600', 'hover:bg-blue-700');
            });
        }

        async function handleVoteSubmit(choice, buttonElement) {
            const hasVoted = localStorage.getItem(LOCAL_STORAGE_KEY_VOTED);
            if (hasVoted) {
                showStatusMessage('คุณได้ทำการโหวตไปแล้ว 1 ครั้ง และไม่สามารถโหวตซ้ำได้', true);
                return;
            }

            const browserId = getBrowserId(); // Get or generate browser ID

            const originalButtonText = buttonElement.innerHTML;
            buttonElement.disabled = true;
            buttonElement.innerHTML = `<i class="fas fa-spinner fa-spin mr-2"></i>กำลังส่ง...`;

            const data = { browserId, choice, sheetId: APP_CONFIG.sheetId }; // Send browserId instead of voterId
            try {
                // Keep 'no-cors' for POST requests if it prevents 'Failed to fetch' errors earlier
                await fetch(APP_CONFIG.APPS_SCRIPT_URL, {
                    method: 'POST',
                    mode: 'no-cors', 
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });

                // In 'no-cors' mode, the response is opaque. We cannot read response.ok or response.json().
                // So, we assume success if the fetch operation itself does not throw an error.
                // The Apps Script will handle duplicate vote logic on the server side.
                localStorage.setItem(LOCAL_STORAGE_KEY_VOTED, 'true'); // Mark as voted in client-side storage
                showStatusMessage(`โหวตให้ "${choice}" สำเร็จ!`, false);
                disableAllVoteButtons(); // Disable all buttons after successful vote

            } catch (error) {
                console.error('Error submitting vote:', error);
                // General error message as specific error details from Apps Script are not readable in 'no-cors' mode.
                showStatusMessage('เกิดข้อผิดพลาด: ไม่สามารถส่งคะแนนได้ (อาจเกิดจากปัญหาเครือข่าย หรือการตั้งค่า Apps Script)', true);
            } finally {
                buttonElement.disabled = false;
                buttonElement.innerHTML = originalButtonText;
            }
        }

        function handleLogin(event) {
            event.preventDefault();
            if (adminPasswordInput.value === APP_CONFIG.ADMIN_PASSWORD) {
                isAdminLoggedIn = true;
                adminLoginView.classList.add('hidden');
                adminResultsView.classList.remove('hidden');
                loginErrorMessage.textContent = '';
                fetchResults();
            } else {
                loginErrorMessage.textContent = 'รหัสผ่านไม่ถูกต้อง!';
                adminPasswordInput.value = '';
            }
        }

        function switchTabView(viewToShow) {
            voteView.classList.toggle('hidden', viewToShow !== 'vote');
            adminView.classList.toggle('hidden', viewToShow !== 'admin');
            navVote.classList.toggle('active', viewToShow === 'vote');
            navAdmin.classList.toggle('active', viewToShow === 'admin');
        }

        // --- UI Rendering Functions ---
        function showLoadingSkeletons() {
            candidateCardsContainer.innerHTML = Array(3).fill('<div class="skeleton-card h-80"></div>').join('');
        }
        function showStatusMessage(message, isError = false) {
            statusContainer.innerHTML = `<div class="status-message p-3 rounded-lg text-center font-medium ${isError ? 'bg-red-100 text-red-700' : 'bg-green-100 text-green-700'}">${message}</div>`;
        }
        function renderCandidateCards(candidates = []) {
            if (!candidates || candidates.length === 0) {
                candidateCardsContainer.innerHTML = `<p class="text-center text-red-500 col-span-full">ไม่พบข้อมูลผู้สมัคร</p>`;
                return;
            }
            candidateCardsContainer.innerHTML = candidates.map(c => {
                // ถ้าเป็น Google Drive link ให้แปลงเป็น direct link
                let imgSrc = c.image;
                const driveMatch = imgSrc && imgSrc.match(/drive\.google\.com\/file\/d\/([^/]+)\//);
                if (driveMatch) {
                    imgSrc = `https://drive.google.com/uc?export=view&id=${driveMatch[1]}`;
                }
                // ถ้าไม่มีรูปหรือแปลงไม่ได้ ให้ใช้ placeholder
                if (!imgSrc || imgSrc.trim() === "") {
                    imgSrc = 'https://placehold.co/400x400/cccccc/ffffff?text=No+Image';
                }
                return `
                    <div class="candidate-card bg-white border border-gray-200 rounded-lg shadow-sm overflow-hidden text-center">
                        <img src="${imgSrc}" alt="${c.name}" class="w-full h-48 object-cover bg-gray-200" onerror="this.onerror=null;this.src='https://placehold.co/400x400/cccccc/ffffff?text=Image+Error';">
                        <div class="p-4">
                            <h3 class="text-xl font-bold text-gray-800">${c.name}</h3>
                            ${c.number ? `<p class="text-2xl font-bold text-blue-600 my-2">เบอร์ ${c.number}</p>` : '<p class="text-lg text-gray-500 my-2">-</p>'}
                            <button data-choice="${c.name}" class="vote-btn w-full mt-2 bg-blue-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-700"><i class="fas fa-check-to-slot mr-2"></i>เลือกคนนี้</button>
                        </div>
                    </div>`;
            }).join('');
        }
        function renderResults(results) {
            if (results.length === 0) {
                resultsTableBody.innerHTML = '<tr><td colspan="3" class="text-center p-8 text-gray-500">ยังไม่มีข้อมูลการโหวต</td></tr>';
            } else {
                resultsTableBody.innerHTML = results.map(row => `
                    <tr class="border-b border-gray-200 hover:bg-gray-100">
                        <td class="p-3 text-gray-700 text-sm">${row.Timestamp || 'N/A'}</td>
                        <td class="p-3 text-gray-700 font-medium">${row.BrowserID || 'N/A'}</td> <!-- Changed from VoterID -->
                        <td class="p-3 text-gray-700">${row.Choice || 'N/A'}</td>
                    </tr>`).join('');
            }
        }

        // --- D3.js Chart Rendering Function ---
        function renderChart(data) {
            // Clear any existing SVG
            d3.select(voteSummaryChart).select("svg").remove();

            if (!data || data.length === 0) {
                voteSummaryChart.innerHTML = '<p class="text-center text-gray-500">ยังไม่มีข้อมูลสำหรับการสรุปผลโหวต</p>';
                return;
            }

            // Sort data by votes in descending order
            data.sort((a, b) => b.votes - a.votes);

            const containerWidth = voteSummaryChart.clientWidth;
            const containerHeight = voteSummaryChart.clientHeight;

            const margin = { top: 20, right: 30, bottom: 60, left: 60 }; // Increased bottom margin for labels
            const width = containerWidth - margin.left - margin.right;
            const height = containerHeight - margin.top - margin.bottom;

            const svg = d3.select(voteSummaryChart)
                .append("svg")
                .attr("width", containerWidth)
                .attr("height", containerHeight)
                .append("g")
                .attr("transform", `translate(${margin.left},${margin.top})`);

            // Define a color scale
            const color = d3.scaleOrdinal(d3.schemeCategory10);

            // X scale for candidates (bands for discrete categories)
            const x = d3.scaleBand()
                .range([0, width])
                .domain(data.map(d => d.candidate))
                .padding(0.3);

            // Y scale for votes (linear for quantitative values)
            const y = d3.scaleLinear()
                .range([height, 0])
                .domain([0, d3.max(data, d => d.votes) * 1.1]); // 1.1 to give some padding at the top

            // Add X axis
            svg.append("g")
                .attr("class", "axis x-axis")
                .attr("transform", `translate(0,${height})`)
                .call(d3.axisBottom(x))
                .selectAll("text")
                .attr("transform", "translate(-10,0)rotate(-45)") // Rotate labels for better readability
                .style("text-anchor", "end")
                .style("font-size", "0.9rem"); // Slightly larger font

            // Add Y axis
            svg.append("g")
                .attr("class", "axis y-axis")
                .call(d3.axisLeft(y).ticks(Math.max(2, d3.max(data, d => d.votes) || 1)).tickFormat(d3.format("d"))) // Ensure integer ticks
                .selectAll("text")
                .style("font-size", "0.9rem"); // Slightly larger font

            // Add bars
            svg.selectAll(".bar")
                .data(data)
                .enter()
                .append("rect")
                .attr("class", "chart-bar")
                .attr("x", d => x(d.candidate))
                .attr("y", height) // Start from bottom for animation
                .attr("width", x.bandwidth())
                .attr("fill", d => color(d.candidate)) // Apply color based on candidate
                .transition() // Add transition
                .duration(750) // Animation duration
                .ease(d3.easeElasticOut) // Elastic easing for bounce effect
                .attr("y", d => y(d.votes))
                .attr("height", d => height - y(d.votes));

            // Add labels on top of bars
            svg.selectAll(".bar-label")
                .data(data)
                .enter()
                .append("text")
                .attr("class", "chart-label")
                .attr("x", d => x(d.candidate) + x.bandwidth() / 2)
                .attr("y", d => y(d.votes) - 5) // Position slightly above the bar
                .attr("text-anchor", "middle")
                .text(d => d.votes)
                .style("opacity", 0) // Start invisible for animation
                .transition()
                .delay(750) // Appear after bars animate
                .duration(250)
                .style("opacity", 1);


            // Handle responsiveness on window resize
            window.addEventListener('resize', () => {
                // Throttle resize events for performance
                let resizeTimer;
                clearTimeout(resizeTimer);
                resizeTimer = setTimeout(() => {
                    renderChart(data); // Re-render the chart with current data
                }, 250);
            });
        }


        // --- Event Listeners ---
        document.addEventListener('DOMContentLoaded', () => {
            loadConfig();
            fetchCandidates();
        });
        candidateCardsContainer.addEventListener('click', e => e.target.closest('.vote-btn') && handleVoteSubmit(e.target.closest('.vote-btn').dataset.choice, e.target.closest('.vote-btn')));
        loginForm.addEventListener('submit', handleLogin);
        refreshBtn.addEventListener('click', fetchResults);
        navVote.addEventListener('click', () => switchTabView('vote'));
        navAdmin.addEventListener('click', () => switchTabView('admin'));
        settingsBtn.addEventListener('click', () => {
            sheetIdInput.value = APP_CONFIG.sheetId || '';
            settingsModal.classList.remove('hidden');
        });
        cancelSettingsBtn.addEventListener('click', () => settingsModal.classList.add('hidden'));
        saveSettingsBtn.addEventListener('click', saveConfig);
        settingsModal.addEventListener('click', e => e.target === settingsModal && settingsModal.classList.add('hidden'));
    </script>
</body>
</html>
