/**
 * ฟังก์ชันหลักที่ทำงานเมื่อมีการร้องขอ GET (เช่น การเปิดหน้าเว็บ)
 * หรือเมื่อมีการเรียกใช้จาก URL โดยตรง (เช่น การดึงข้อมูลผู้สมัครหรือผลลัพธ์)
 * @param {GoogleAppsScript.Events.DoGet} e เหตุการณ์ DoGet ที่มีพารามิเตอร์การร้องขอ
 * @returns {GoogleAppsScript.Content.TextOutput} เนื้อหา JSON หรือ HTML
 */
function doGet(e) {
  const action = e.parameter.action;
  const sheetId = e.parameter.sheetId; // รับ Sheet ID จากพารามิเตอร์ URL
  const spreadsheet = sheetId ? SpreadsheetApp.openById(sheetId) : SpreadsheetApp.getActiveSpreadsheet();

  try {
    if (action === 'getCandidates') {
      return getCandidates(spreadsheet);
    } else if (action === 'getResults') {
      return getResults(spreadsheet);
    } else {
      // สำหรับการเรียกใช้โดยตรงจาก URL ของ Apps Script
      return HtmlService.createTemplateFromFile('index').evaluate();
    }
  } catch (error) {
    Logger.log("Error in doGet: " + error.toString());
    return ContentService.createTextOutput(JSON.stringify({ error: error.message || "Unknown error" }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * ฟังก์ชันหลักที่ทำงานเมื่อมีการร้องขอ POST (เช่น การส่งข้อมูลการโหวต)
 * @param {GoogleAppsScript.Events.DoPost} e เหตุการณ์ DoPost ที่มีข้อมูลที่ส่งมา
 * @returns {GoogleAppsScript.Content.TextOutput} สถานะการทำงาน
 */
function doPost(e) {
  const data = JSON.parse(e.postData.contents);
  const sheetId = data.sheetId; // รับ Sheet ID จากข้อมูล POST
  const spreadsheet = sheetId ? SpreadsheetApp.openById(sheetId) : SpreadsheetApp.getActiveSpreadsheet();

  try {
    const voterId = data.voterId;
    const choice = data.choice;

    if (!voterId || !choice) {
      throw new Error("Voter ID and choice are required.");
    }

    const sheet = spreadsheet.getSheetByName('Votes');
    if (!sheet) {
      // หากไม่พบชีท 'Votes' ให้สร้างขึ้นมาพร้อม Header
      Logger.log("Sheet 'Votes' not found. Creating a new sheet with default headers.");
      const newSheet = spreadsheet.insertSheet('Votes');
      newSheet.appendRow(['Timestamp', 'VoterID', 'Choice']);
      sheet = newSheet; // กำหนดชีทที่สร้างใหม่ให้กับตัวแปร sheet
    } else {
      // ตรวจสอบว่ามี Header ที่จำเป็นในชีท 'Votes' หรือไม่
      const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
      const requiredHeaders = ['Timestamp', 'VoterID', 'Choice'];
      const missingHeaders = requiredHeaders.filter(h => !headers.includes(h));
      if (missingHeaders.length > 0) {
        // หากขาด Header สำคัญ ให้ log แจ้งเตือน แต่ยังคง appendRow ได้
        Logger.log(`Warning: Sheet 'Votes' is missing expected headers: ${missingHeaders.join(', ')}. Data might not align as expected.`);
      }
    }


    // เพิ่มข้อมูลการโหวต
    sheet.appendRow([new Date(), voterId, choice]);

    return ContentService.createTextOutput(JSON.stringify({ status: 'success', message: 'Vote recorded' }))
      .setMimeType(ContentService.MimeType.JSON);

  } catch (error) {
    Logger.log("Error in doPost: " + error.toString());
    return ContentService.createTextOutput(JSON.stringify({ status: 'error', message: error.message || "Failed to record vote" }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * ดึงข้อมูลผู้สมัครจาก Google Sheet
 * @param {GoogleAppsScript.Spreadsheet.Spreadsheet} spreadsheet Spreadsheet ที่จะใช้
 * @returns {GoogleAppsScript.Content.TextOutput} รายชื่อผู้สมัครในรูปแบบ JSON
 */
function getCandidates(spreadsheet) {
  const sheet = spreadsheet.getSheetByName('Candidates');
  if (!sheet) {
    throw new Error("Sheet 'Candidates' not found. Please create a sheet named 'Candidates' with 'name', 'image', 'number' headers.");
  }

  const range = sheet.getDataRange();
  const values = range.getValues();

  if (values.length === 0) {
    // หากชีทว่างเปล่า หรือมีแค่ Header แต่ไม่มีข้อมูล
    return ContentService.createTextOutput(JSON.stringify([]))
      .setMimeType(ContentService.MimeType.JSON);
  }

  const headers = values[0];
  const candidates = [];

  // ตรวจสอบ Headers ที่จำเป็นสำหรับ Candidates
  const requiredHeaders = ['name', 'image', 'number'];
  const missingHeaders = requiredHeaders.filter(h => !headers.includes(h));
  if (missingHeaders.length > 0) {
    Logger.log(`Warning: Sheet 'Candidates' is missing expected headers: ${missingHeaders.join(', ')}. Some candidate data might be incomplete.`);
  }

  for (let i = 1; i < values.length; i++) {
    const row = values[i];
    const candidate = {};
    for (let j = 0; j < headers.length; j++) {
      candidate[headers[j]] = row[j];
    }
    candidates.push(candidate);
  }

  return ContentService.createTextOutput(JSON.stringify(candidates))
    .setMimeType(ContentService.MimeType.JSON);
}

/**
 * ดึงข้อมูลผลการโหวตทั้งหมดจาก Google Sheet
 * @param {GoogleAppsScript.Spreadsheet.Spreadsheet} spreadsheet Spreadsheet ที่จะใช้
 * @returns {GoogleAppsScript.Content.TextOutput} ผลการโหวตในรูปแบบ JSON
 */
function getResults(spreadsheet) {
  const sheet = spreadsheet.getSheetByName('Votes');
  if (!sheet) {
    throw new Error("Sheet 'Votes' not found. Please ensure it exists with 'Timestamp', 'VoterID', 'Choice' headers.");
  }

  const range = sheet.getDataRange();
  const values = range.getValues();
  if (values.length === 0) {
    return ContentService.createTextOutput(JSON.stringify([]))
      .setMimeType(ContentService.MimeType.JSON);
  }

  const headers = values[0];
  const results = [];

  // ตรวจสอบ Headers ที่จำเป็นสำหรับ Results
  const requiredHeaders = ['Timestamp', 'VoterID', 'Choice'];
  const missingHeaders = requiredHeaders.filter(h => !headers.includes(h));
  if (missingHeaders.length > 0) {
    Logger.log(`Warning: Sheet 'Votes' is missing expected headers: ${missingHeaders.join(', ')}. Some result data might be incomplete.`);
  }

  for (let i = 1; i < values.length; i++) {
    const row = values[i];
    const result = {};
    for (let j = 0; j < headers.length; j++) {
      // แปลง Timestamp ให้อ่านง่ายขึ้น
      if (headers[j] === 'Timestamp' && row[j] instanceof Date) {
        result[headers[j]] = row[j].toLocaleString('th-TH', { dateStyle: 'medium', timeStyle: 'short' });
      } else {
        result[headers[j]] = row[j];
      }
    }
    results.push(result);
  }

  return ContentService.createTextOutput(JSON.stringify(results))
    .setMimeType(ContentService.MimeType.JSON);
}

// ฟังก์ชันที่ไม่เกี่ยวข้องกับโค้ด HTML โดยตรง สามารถลบได้
function include(filename) {
  return HtmlService.createTemplateFromFile(filename).evaluate().getContent();
}
